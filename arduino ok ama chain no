<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Metamask and Bluetooth Control</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.3.4/dist/web3.min.js"></script>
</head>
<body>
    <button onclick="loginWithMetamask()">Login with Metamask</button>
    <p id="address"></p>
    <button onclick="connectSerial()">Connect to Arduino</button>
    <br>
    <button onclick="sendToArduinoZero()">Set Angle to 0</button>
    <button onclick="sendToArduino90()">Set Angle to 90</button>

    <input type="text" id="tokenID" placeholder="Token ID Girin">
    <button onclick="checkOwnership()">Sahipliği Kontrol Et</button>
    <br><br>

    <button onclick="goToSealRegistry()">SealRegistry</button>
    <br><br><br><br>
    <h2>Imzalama</h2>
    <br> <button onclick="handshakeWithArduino()">Public Key </button>
    <p id="publicKeyDisplay"></p>

    <textarea id="messageToSign" rows="4" cols="50" placeholder="Imzalanacak mesajı girin"></textarea><br>
    <button onclick="signMessage()">Imzala</button>
    <h3>Imza:</h3>
    <p id="signatureOutput"></p>

<script>
    function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

    let port;
    let isOwner = false; // Kullanıcının kontrat sahibi olup olmadığını kontrol etmek için bir değişken
    let isPublisher = false;
    function goToSealRegistry() {
    window.location.href = "/SealRegistry.html"; // Bu, SealRegistry.html adlı bir sayfaya yönlendirme yapar.
}
async function loginWithMetamask() {
            if (typeof window.ethereum !== 'undefined') {
                const web3 = new Web3(window.ethereum);
                try {
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    const account = accounts[0];
                    document.getElementById('address').innerText = 'Connected with address: ' + account;
                } catch (error) {
                    console.error(error);
                }
            } else {
                alert('Please install Metamask extension!');
            }
        }
async function connectSerial() {
            try {
                port = await navigator.serial.requestPort();
                await port.open({ baudRate: 9600 });
                console.log('Connected to the serial port');
            } catch (error) {
                console.error('There was an error opening the serial port:', error);
            }
        }
      
      
async function handshakeWithArduino() {
    if (port && port.writable) {
        const writer = port.writable.getWriter();

        // 'H' komutunu Arduino'ya gönder
        const handshakeCommand = new Uint8Array([ 'H'.charCodeAt(0) ]);

        writer.write(handshakeCommand);
        writer.releaseLock();
        await sleep(100);
        // Arduino'dan gelen halka açık anahtarı oku
        const reader = port.readable.getReader();
        reader.read().then(({ value, done }) => {
            if (value) {
                const publicKey = new TextDecoder().decode(value);
                //console.log("Received Public Key:", publicKey);
                // İsterseniz bu anahtarı bir HTML elementinde gösterebilirsiniz
                document.getElementById('publicKeyDisplay').innerText = "";
                document.getElementById('publicKeyDisplay').innerText = publicKey;
            }
            reader.releaseLock();
            
        });
    } else {
        alert('Lütfen cihaza bağlanın!');
    }
}


     

       
async function sendToArduinoZero(){
    //if (!isOwner) {
      //  alert('Bu akıllı kontratın sahibi değilsiniz!');
        //return;
    //}
    if (port && port.writable) {
        const writer = port.writable.getWriter();
        const command = "S0"; // "S0" veya "S90" gibi bir komut oluşturur
        const dataToSend = new TextEncoder().encode(command);
        await writer.write(dataToSend);
        writer.releaseLock();
    } else {
        alert('Lütfen cihaza bağlanın!');
    }

}

async function sendToArduino90(){
    //if (!isOwner) {
      //  alert('Bu akıllı kontratın sahibi değilsiniz!');
       // return;
    //}
    if (port && port.writable) {
        const writer = port.writable.getWriter();
        const command = "S90"; // "S0" veya "S90" gibi bir komut oluşturur
        const dataToSend = new TextEncoder().encode(command);
        await writer.write(dataToSend);
        writer.releaseLock();
    } else {
        alert('Lütfen cihaza bağlanın!');
    }
}
async function checkOwnership() {
        
        const contractAddress = "0x90B090a65912673c5951b0b090BEB0ef1A0F5Cf9";
        const qrCode = document.getElementById('tokenID').value;
        if (typeof window.ethereum !== 'undefined') {
            const web3 = new Web3("https://sepolia.rpc.metamask.io/");
            const contract = new web3.eth.Contract([{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastAssignedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastMintedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadataModified","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newURI","type":"string"}],"name":"modifyMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"name":"preMintSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"publisher","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"purchaseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"sealStatus","outputs":[{"internalType":"enum SmartSeal.SealStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"enum SmartSeal.SealStatus","name":"status","type":"uint8"}],"name":"setSealStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}], contractAddress); // Burada boş bir ABI kullanıldı. Gerçek ABI'nizle değiştirin.
            const owner = await contract.methods.ownerOf(qrCode).call();
            const publisher = await contract.methods.publisher(qrCode).call();
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            const userAccount = accounts[0];

        console.log("Kontrat Sahibi:", owner);
        console.log("Kullanıcının Cüzdan Adresi:", userAccount);

        if (String(userAccount).toLowerCase() === String(owner).toLowerCase()) {
            isOwner = true; // Kullanıcı kontratın sahibidir.
            alert('Bu akıllı kontratın sahibisiniz. Servo motoru açabilirsiniz');
        } else {
            isOwner = false;
            alert('Bu akıllı kontratın sahibi değilsiniz!');
             }
   
             if (String(userAccount).toLowerCase() === String(publisher).toLowerCase()) {
            isPublisher = true; // Kullanıcı kontratın sahibidir.
            alert('Bu akıllı kontratın Publisherı sizsiniz. Servo motoru kilitleyebilirsniz');
        } else {
            isPublisher = false;
            alert('Bu akıllı kontratın publisherı değilsiniz!');
        }
            } 
    
    else {
        alert('Lütfen Metamask eklentisini yükleyin!');
    }

    
    } 


async function signMessage() {
            const message = document.getElementById('messageToSign').value;
            document.getElementById('signatureOutput').innerText = '';
            if (message && port && port.writable) {
                const writer = port.writable.getWriter();

                // 'M' tanımlayıcısını ve mesajı Arduino'ya gönder
                const dataToSend = new TextEncoder().encode("M"+message  );
                await writer.write(dataToSend);
                writer.releaseLock();
               
                
                await sleep(8000);
                
                const reader = port.readable.getReader();
                reader.read().then(({ value, done }) => {
            if (value) {
                const signature = new TextDecoder().decode(value);
               
                document.getElementById('signatureOutput').innerText = signature;
            }
            reader.releaseLock();
            
        });

                // Arduino'dan gelen imzayı oku
 //               const reader = port.readable.getReader();
                
 //               const { value, done } = await reader.read();
 //               reader.releaseLock();
 //               await sleep(1000);
 //               if (value) {
 //                   const signature = new TextDecoder().decode(value);
 //                   document.getElementById('signatureOutput').innerText = signature;
 //               }
            } else {
                alert('Lütfen imzalanacak bir mesaj girin veya cihaza bağlanın!');
            }
        }
    </script>
</body>
</html>
