<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Metamask and Bluetooth Control</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.3.4/dist/web3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tweetnacl/1.0.3/nacl-fast.min.js"></script>

</head>
<body>
    <button onclick="loginWithMetamask()">Login with Metamask</button>
    <p id="address"></p>
    <button onclick="connectSerial()">Connect to Arduino</button>
    <p id="address"></p>
    
   

    <input type="text" id="contractAddress" placeholder="Mühür Barkodunu girin ">
    <button onclick="MuhurCheck()">Mühür Bilgilerini Kontrol Et</button>
    <br>
    <p id="publisher"></p>
    <p id="status"></p>
    <p id="owner"></p>
    <p id="aciklama"></p>

    <button onclick="sendToArduinoZero()">Paketi Aç</button>
    <button onclick="sendToArduino90()">Mühürle</button>
    <br>
    <h2>Ürün Detay</h2>
    <br><textarea id="metadatatext" rows="4" cols="50" placeholder="Mühürlenecek Ürünün Detaylarını Girin"></textarea><br>
    <br><br><br><br>
    <h2>Imzalama</h2>
    <br> <button onclick="handshakeWithArduino()">Public Key </button>
    <p id="publicKeyDisplay"></p>

    <textarea id="messageToSign" rows="4" cols="50" placeholder="Imzalanacak mesajı girin"></textarea><br>
    <button onclick="signMessage()">Imzala</button>
    <h3>Imza:</h3>
    <p id="signatureOutput"></p>

<script>
    function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

    let port;
    let fiyat="1000000000000000";
    let isOwner = false; // Kullanıcının kontrat sahibi olup olmadığını kontrol etmek için bir değişken
function goToSealOpen() {
    window.location.href = "/index2.html"; // Bu, SealRegistry.html adlı bir sayfaya yönlendirme yapar.
}
function goToSealClose() {
    window.location.href = "/SealRegistry.html"; // Bu, SealRegistry.html adlı bir sayfaya yönlendirme yapar.
}
async function loginWithMetamask() {
            if (typeof window.ethereum !== 'undefined') {
                const web3 = new Web3(window.ethereum);
                try {
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    const account = accounts[0];
                    document.getElementById('address').innerText = 'Connected with address: ' + account;
                } catch (error) {
                    console.error(error);
                }
            } else {
                alert('Please install Metamask extension!');
            }
        }
async function connectSerial() {
            try {
                port = await navigator.serial.requestPort();
                await port.open({ baudRate: 9600 });
                console.log('Connected to the serial port');
            } catch (error) {
                console.error('There was an error opening the serial port:', error);
            }
        }
async function handshakeWithArduino() {
    if (port && port.writable) {
        const writer = port.writable.getWriter();

        // 'H' komutunu Arduino'ya gönder
        const handshakeCommand = new Uint8Array([ 'H'.charCodeAt(0) ]);

        writer.write(handshakeCommand);
        writer.releaseLock();
        await sleep(100);
        // Arduino'dan gelen halka açık anahtarı oku
        const reader = port.readable.getReader();
        reader.read().then(({ value, done }) => {
            if (value) {
                const publicKey = new TextDecoder().decode(value);
                //console.log("Received Public Key:", publicKey);
                // İsterseniz bu anahtarı bir HTML elementinde gösterebilirsiniz
                document.getElementById('publicKeyDisplay').innerText = "";
                document.getElementById('publicKeyDisplay').innerText = publicKey;
            }
            reader.releaseLock();
            
        });
    } else {
        alert('Lütfen cihaza bağlanın!');
    }
}     
async function sendToArduinoZero(){
    if (typeof window.ethereum !== 'undefined'&&port && port.writable) {
       
        const barcode=document.getElementById('contractAddress').value.toString();
        const web3 = new Web3("https://rpc.sepolia.org");
        const  contractAddress = "0x782cc31cec9f432594a3cf71f5ae1ebe8ad5c18c";
        const contract = new web3.eth.Contract([{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newmetadata","type":"string"}],"name":"CloseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"barcode","type":"string"}],"name":"IDofBarcode","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"OpenSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"barcodeToTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastAssignedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastMintedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadataModified","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newURI","type":"string"}],"name":"modifyMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"},{"internalType":"string","name":"barcode","type":"string"}],"name":"preMintSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"publisher","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"purchaseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"sealStatus","outputs":[{"internalType":"enum SmartSeal.SealStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToBarcode","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}], contractAddress); // Burada boş bir ABI kullanıldı. Gerçek ABI'nizle değiştirin.
        const tokenID=await contract.methods.barcodeToTokenId(barcode).call();
        await new Promise(resolve => setTimeout(resolve, 1000)); 
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        const userAccount = accounts[0];
        const contractMethod = contract.methods.OpenSeal(tokenID);
        const transactionDetails = {
            from: userAccount, // İşlemi gönderen adres
            to: contractAddress, // Akıllı kontratın adresi
            data: contractMethod.encodeABI()         };
            try {
            const txHash = await window.ethereum.request({
            method: 'eth_sendTransaction',
            params: [transactionDetails]
        });
        console.log('Transaction Hash:', txHash);

        const receiptInterval = setInterval(async () => {
    const receipt = await web3.eth.getTransactionReceipt(txHash);
    if (receipt) {
        clearInterval(receiptInterval); // Interval'i durdur
        if (receipt.status) {
            console.log('Transaction confirmed:', receipt);
            // İşlem başarılı oldu
            // Burada servoya sinyal gönderebilirsiniz.
            if (port && port.writable) {
        const writer = port.writable.getWriter();
        const command = "S0"; // "S0" veya "S90" gibi bir komut oluşturur
        const dataToSend = new TextEncoder().encode(command);
        await writer.write(dataToSend);
        writer.releaseLock();
    } else {
        alert('Lütfen cihaza bağlanın!');
    }

        } else {
            console.error('Transaction failed:', receipt);
            // İşlem başarısız oldu
        }
    }
}, 5000); // Her 5 saniyede bir kontrol et

        } catch (error) {
            console.error("Bir hata oluştu:", error);
            alert('İşlem başarısız!');
        }


        }



   

    }
async function sendToArduino90(){
    if (typeof window.ethereum !== 'undefined'&&port && port.writable) {
       
       const barcode=document.getElementById('contractAddress').value.toString();
       const newmetadata=document.getElementById('metadatatext').value.toString();
       const web3 = new Web3("https://rpc.sepolia.org");
       const  contractAddress = "0x782cc31cec9f432594a3cf71f5ae1ebe8ad5c18c";
       const contract = new web3.eth.Contract([{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newmetadata","type":"string"}],"name":"CloseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"barcode","type":"string"}],"name":"IDofBarcode","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"OpenSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"barcodeToTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastAssignedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastMintedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadataModified","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newURI","type":"string"}],"name":"modifyMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"},{"internalType":"string","name":"barcode","type":"string"}],"name":"preMintSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"publisher","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"purchaseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"sealStatus","outputs":[{"internalType":"enum SmartSeal.SealStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToBarcode","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}], contractAddress); // Burada boş bir ABI kullanıldı. Gerçek ABI'nizle değiştirin.
       const tokenID=await contract.methods.barcodeToTokenId(barcode).call();
       await new Promise(resolve => setTimeout(resolve, 1000)); 
       const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
       const userAccount = accounts[0];
       const contractMethod = contract.methods.CloseSeal(tokenID,newmetadata);
       
       const transactionDetails = {
           from: userAccount, // İşlemi gönderen adres
           to: contractAddress, // Akıllı kontratın adresi
           data: contractMethod.encodeABI(),
           value: "0x" + Web3.utils.toBN(Web3.utils.toWei("0.001", "ether")).toString(16)
                  };
           try {
           const txHash = await window.ethereum.request({
           method: 'eth_sendTransaction',
           params: [transactionDetails]
       });
       console.log('Transaction Hash:', txHash);

       const receiptInterval = setInterval(async () => {
   const receipt = await web3.eth.getTransactionReceipt(txHash);
   if (receipt) {
       clearInterval(receiptInterval); // Interval'i durdur
       if (receipt.status) {
           console.log('Transaction confirmed:', receipt);
           // İşlem başarılı oldu
           // Burada servoya sinyal gönderebilirsiniz.
           if (port && port.writable) {
       const writer = port.writable.getWriter();
       const command = "S90"; // "S0" veya "S90" gibi bir komut oluşturur
       const dataToSend = new TextEncoder().encode(command);
       await writer.write(dataToSend);
       writer.releaseLock();
   } else {
       alert('Lütfen cihaza bağlanın!');
   }

       } else {
           console.error('Transaction failed:', receipt);
           // İşlem başarısız oldu
       }
   }
}, 5000); // Her 5 saniyede bir kontrol et

       } catch (error) {
           console.error("Bir hata oluştu:", error);
           alert('İşlem başarısız!');
       }


       }
   
}
async function MuhurCheck() {
    const web3 = new Web3("https://rpc.sepolia.org");
    const  contractAddress = "0x782cc31cec9f432594a3cf71f5ae1ebe8ad5c18c";
    const contract = new web3.eth.Contract([{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newmetadata","type":"string"}],"name":"CloseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"barcode","type":"string"}],"name":"IDofBarcode","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"OpenSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"barcodeToTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastAssignedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastMintedTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadataModified","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"newURI","type":"string"}],"name":"modifyMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"},{"internalType":"string","name":"barcode","type":"string"}],"name":"preMintSeal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"publisher","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"purchaseSeal","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"sealStatus","outputs":[{"internalType":"enum SmartSeal.SealStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToBarcode","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}], contractAddress); // Burada boş bir ABI kullanıldı. Gerçek ABI'nizle değiştirin.
    const barcode=document.getElementById('contractAddress').value.toString();
    
   
    const tokenID=await contract.methods.barcodeToTokenId(barcode).call();
   
    
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    const ownerOf = await contract.methods.ownerOf(tokenID).call();
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    const publisher = await contract.methods.publisher(tokenID).call();
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    const sealStatus = await contract.methods.sealStatus(tokenID).call();
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    const TokenUri = await contract.methods.tokenURI(tokenID).call();
    
   
    document.getElementById('publisher').innerText = 'Mühürleyen adres: ' + publisher;
    document.getElementById('status').innerText = 'Null(0)/Açık(1) / Kapalı(2): ' + sealStatus;
    document.getElementById('owner').innerText = 'Şuanki Sahibi: ' + ownerOf;
    document.getElementById('aciklama').innerText = 'Açıklama/METADATA: ' + TokenUri;
}
function hexToUint8Array(hexString) {
    var result = new Uint8Array(hexString.length / 2);
    for (var i = 0; i < hexString.length; i += 2) {
        result[i / 2] = parseInt(hexString.substr(i, 2), 16);
    }
    return result;
}
async function signMessage() {
            const message = document.getElementById('messageToSign').value.toString();
            document.getElementById('signatureOutput').innerText = '';
            if (message && port && port.writable) {
                const writer = port.writable.getWriter();

                // 'M' tanımlayıcısını ve mesajı Arduino'ya gönder
                const kodlumesaj="M"+message;
                const dataToSend = new TextEncoder().encode(kodlumesaj );
                await writer.write(dataToSend);
                writer.releaseLock();
               
                
                await sleep(10000);
                
                const reader = port.readable.getReader();
                reader.read().then(({ value, done }) => {
            if (value) {
                const signature = new TextDecoder().decode(value);
               
                document.getElementById('signatureOutput').innerText = signature;
            }
            reader.releaseLock();
            
        });
            //---------Verification
         await sleep(1000);
        var publicKey8 = hexToUint8Array(document.getElementById('publicKeyDisplay').innerText);
        var signature8 = hexToUint8Array(document.getElementById('signatureOutput').innerText);
        var messageUint8Array = new Uint8Array(message.length);
        for (var i = 0; i < message.length; i++) {
         messageUint8Array[i] = message.charCodeAt(i);
            }
            console.log("Signature length:", signature8.length);
            console.log("Public key length:", publicKey8.length);

            var isValid = nacl.sign.detached.verify(messageUint8Array, signature8, publicKey8);
            console.log(isValid ? "Valid signature!" : "Invalid signature!");
    


    
    
    
    
    
    
    
    } else {
                alert('Lütfen imzalanacak bir mesaj girin veya cihaza bağlanın!');
            }
        }
    </script>
</body>
</html>
